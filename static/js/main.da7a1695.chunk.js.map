{"version":3,"sources":["components/WidgetSlot/WidgetSlot.js","views/Dashboard/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["WidgetSlot","props","style","border","widget","Dashboard","useState","widthConstraint","heightConstraint","componentWidth","componentHeight","componentAudio","coreAPI","useRef","width","height","facingMode","selectedWidgets","map","index","key","App","className","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"uSAuBeA,EApBI,SAACC,GAEhB,OACI,yBACIC,MAAO,CACHC,OAAQ,WAIRF,EAAMG,SCiDPC,EAxDG,SAACJ,GAAU,MASqBK,mBAAS,MAT9B,mBASlBC,EATkB,aAUuBD,mBAAS,MAVhC,mBAUlBE,EAVkB,aAWmBF,mBAAS,OAX5B,mBAWlBG,EAXkB,aAYqBH,mBAAS,MAZ9B,mBAYlBI,EAZkB,aAamBJ,oBAAS,IAb5B,mBAalBK,EAbkB,KAuBnBC,GAvBmB,KAuBT,CACZ,UATcC,iBAAO,MAUrB,iBARmB,CACnBC,MAAOP,EACPQ,OAAQP,EACRQ,WAAY,QAMZ,MAASP,EACT,OAAUC,EACV,MAASC,IAGPM,EAAkB,CACpB,kBAAC,IAAD,CAAcL,QAASA,KAG3B,OACI,oCAWYK,EAAgBC,KAAI,SAACd,EAAQe,GAAT,OAChB,kBAAC,EAAD,CAAYC,IAAKD,EAAOf,OAAQA,SC7BzCiB,EApBH,WACV,OACE,yBAAKC,UAAU,OACX,iDAGA,yBACIpB,MAAO,CACH,UAAY,OACZ,MAAQ,OACR,OAAS,OACT,gBAAkB,WAGtB,kBAAC,EAAD,SCNNqB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MCxFjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDc1C,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqB,IAAIC,qBAAwB7B,OAAOC,SAAS6B,MACpDC,SAAW/B,OAAOC,SAAS8B,OAIvC,OAGF/B,OAAOgC,iBAAiB,QAAQ,WAC9B,IAAM3B,EAAK,UAAMwB,qBAAN,sBAEP/B,IAgEV,SAAiCO,EAAOC,GAEtC2B,MAAM5B,GACHK,MAAK,SAAAwB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5ChC,UAAUC,cAAcgC,MAAM9B,MAAK,SAAAC,GACjCA,EAAa8B,aAAa/B,MAAK,WAC7BV,OAAOC,SAASyC,eAKpBtC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEArFAwB,CAAwBtC,EAAOC,GAI/BC,UAAUC,cAAcgC,MAAM9B,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OCrC/BE,K","file":"static/js/main.da7a1695.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst WidgetSlot = (props) => {\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                border: \"dashed\",\r\n            }}\r\n        >\r\n            {\r\n                props.widget\r\n            }\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nWidgetSlot.propTypes = {\r\n    widget: PropTypes.func.isRequired\r\n}\r\n\r\nexport default WidgetSlot;","import React, { useState, useRef } from \"react\";\r\nimport GridLayout from 'react-grid-layout';\r\nimport CameraWidget from \"camera-widget\";\r\nimport WidgetSlot from \"../../components/WidgetSlot/WidgetSlot\";\r\n\r\nconst Dashboard = (props) => {\r\n\r\n    // const layout = [\r\n    //     {i: 'a', x: 0, y: 0, w: 15, h: 15},\r\n    //     {i: 'b', x: 50, y: 0, w: 50, h: 10},\r\n    //     {i: 'c', x: 0, y: 25, w: 20, h: 35, minH: 35, minW: 20},\r\n    //     {i: 'd', x: 80, y: 0, w: 50, h: 40, isResizable:false}\r\n    // ];\r\n\r\n    const [widthConstraint, setWidthConstraint] = useState(1280);\r\n    const [heightConstraint, setHeightConstraint] = useState(720);\r\n    const [componentWidth, setComponentWidth] = useState(1280);\r\n    const [componentHeight, setComponentHeight] = useState(720);\r\n    const [componentAudio, setComponentAudio] = useState(false);\r\n\r\n    const webcamRef = useRef(null);\r\n\r\n    let videoConstraints = {\r\n        width: widthConstraint,\r\n        height: heightConstraint,\r\n        facingMode: \"user\"\r\n    };\r\n\r\n    const coreAPI = {\r\n        \"webcamRef\": webcamRef,\r\n        \"videoConstraints\": videoConstraints,\r\n        \"width\": componentWidth,\r\n        \"height\": componentHeight,\r\n        \"audio\": componentAudio\r\n    };\r\n\r\n    const selectedWidgets = [\r\n        <CameraWidget coreAPI={coreAPI}/>\r\n    ];\r\n\r\n    return (\r\n        <>\r\n            {/*<GridLayout*/}\r\n                {/*autoSize={true}*/}\r\n                {/*className=\"layout\"*/}\r\n                {/*verticalCompact={true}*/}\r\n                {/*layout={layout}*/}\r\n                {/*cols={100}*/}\r\n                {/*rowHeight={1}*/}\r\n                {/*width={1200}*/}\r\n            {/*>*/}\r\n                {\r\n                    selectedWidgets.map((widget, index) =>\r\n                        <WidgetSlot key={index} widget={widget}/>\r\n                    )\r\n                }\r\n            {/*</GridLayout>*/}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Dashboard;","import React from 'react';\r\nimport './App.css';\r\nimport Dashboard from \"./views/Dashboard/Dashboard\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"App\">\r\n        <h1>\r\n            Smart Mirror Core\r\n        </h1>\r\n        <div\r\n            style={{\r\n                \"marginTop\":\"25px\",\r\n                \"width\":\"80vw\",\r\n                \"height\":\"90vh\",\r\n                \"backgroundColor\":\"silver\"\r\n            }}\r\n        >\r\n            <Dashboard/>\r\n        </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'react-grid-layout/css/styles.css';\r\nimport 'react-resizable/css/styles.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}