{"version":3,"sources":["components/CameraSettings/CameraSettings.js","views/Dashboard/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["CameraSettings","props","cameraAPI","setWidthConstraint","setComponentWidth","setHeightConstraint","setComponentHeight","coreAPI","videoConstraints","width","height","Stack","styles","root","maxWidth","Slider","label","min","max","step","defaultValue","showValue","onChange","value","horizontal","vertical","ClockWidget","useState","Date","time","setTime","useEffect","setInterval","Dashboard","widthConstraint","heightConstraint","componentWidth","componentHeight","componentAudio","setComponentAudio","useRef","facingMode","selectedWidgets","key","data-grid","x","y","w","h","forecast","apikey","type","city","unit","minW","className","style","cols","rowHeight","map","widget","App","AppHeader","backgroundColor","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1933cf8b.chunk.js","sourcesContent":["/** WIP = FOR TESTING ONLY\r\n * Author: Jacob Blazina\r\n *\r\n * Description: A settings menu for adjusting the scaling of the Camera widget.\r\n */\r\n\r\nimport React from \"react\";\r\nimport {Stack, Slider} from \"office-ui-fabric-react\";\r\n\r\nconst CameraSettings = (props) => {\r\n\r\n    const {\r\n        setWidthConstraint,\r\n        setComponentWidth,\r\n        setHeightConstraint,\r\n        setComponentHeight\r\n    } = props.cameraAPI;\r\n\r\n    const {\r\n        videoConstraints,\r\n        width,\r\n        height\r\n    } = props.coreAPI;\r\n\r\n    return (\r\n        <>\r\n            <Stack  styles={{ root: { maxWidth: 300 } }}>\r\n                <Slider\r\n                    label=\"Video Constraint: Width\"\r\n                    min={1}\r\n                    max={2000}\r\n                    step={1}\r\n                    defaultValue={videoConstraints.width}\r\n                    showValue={true}\r\n                    onChange={(value) => setWidthConstraint(value)}\r\n                />\r\n                <Slider\r\n                    label=\"Component Width\"\r\n                    min={1}\r\n                    max={2000}\r\n                    step={1}\r\n                    defaultValue={width}\r\n                    showValue={true}\r\n                    onChange={(value) => setComponentWidth(value)}\r\n                />\r\n            </Stack>\r\n            <Stack horizontal styles={{ root: { height: 200 } }}>\r\n                <Slider\r\n                    label=\"Video Constraint: Height\"\r\n                    min={1}\r\n                    max={1000}\r\n                    step={1}\r\n                    defaultValue={videoConstraints.height}\r\n                    showValue\r\n                    vertical\r\n                    onChange={(value) => setHeightConstraint(value)}\r\n                />\r\n                <Slider\r\n                    label=\"Component Height\"\r\n                    min={1}\r\n                    max={1000}\r\n                    step={1}\r\n                    defaultValue={height}\r\n                    showValue\r\n                    vertical\r\n                    onChange={(value) => setComponentHeight(value)}\r\n                />\r\n            </Stack>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CameraSettings;","/**\r\n * Author: Jacob Blazina\r\n *\r\n * Description: The dashboard component. Displays the selected widgets in a defined layout.\r\n *\r\n */\r\n\r\nimport React, { useState, useRef, useEffect } from \"react\";\r\nimport GridLayout from \"react-grid-layout\";\r\nimport CameraWidget from \"camera-widget\";\r\nimport {Clock} from \"react-clock\";\r\nimport CameraSettings from \"../../components/CameraSettings/CameraSettings\";\r\nimport '../../components/WidgetSlot/css/styles.css';\r\nimport '../../components/WidgetSlot/css/test.css';\r\nimport ReactWeather from \"react-open-weather\";\r\nimport Calendar from 'react-calendar';\r\n\r\nconst Dashboard = (props) => {\r\n\r\n    const [widthConstraint, setWidthConstraint] = useState(1280);\r\n    const [heightConstraint, setHeightConstraint] = useState(720);\r\n    const [componentWidth, setComponentWidth] = useState(500);\r\n    const [componentHeight, setComponentHeight] = useState(500);\r\n    const [componentAudio, setComponentAudio] = useState(false);\r\n\r\n    const webcamRef = useRef(null);\r\n\r\n    let videoConstraints = {\r\n        width: widthConstraint,\r\n        height: heightConstraint,\r\n        facingMode: \"user\"\r\n    };\r\n\r\n    const coreAPI = {\r\n        \"webcamRef\": webcamRef,\r\n        \"videoConstraints\": videoConstraints,\r\n        \"width\": componentWidth,\r\n        \"height\": componentHeight,\r\n        \"audio\": componentAudio\r\n    };\r\n\r\n    const cameraAPI = {\r\n      setWidthConstraint,\r\n      setHeightConstraint,\r\n      setComponentWidth,\r\n      setComponentHeight,\r\n      setComponentAudio\r\n    };\r\n\r\n    const selectedWidgets = [\r\n        <div key=\"camera-widget\" data-grid={{x: 4, y: 0, w: 5, h: 10}}>\r\n            <CameraWidget coreAPI={coreAPI}/>\r\n        </div>,\r\n        <div key=\"clock-widget\" data-grid={{x: 12, y: 0, w: 2, h: 5}}>\r\n            <ClockWidget coreAPI={coreAPI}/>\r\n        </div>,\r\n        <div key=\"camera-settings\" data-grid={{ x: 0, y: 10, w: 2, h: 10}}>\r\n            <CameraSettings cameraAPI={cameraAPI} coreAPI={coreAPI}/>\r\n        </div>,\r\n        <div key=\"weather-widget\" data-grid={{ x: 12, y: 10, w: 2, h: 10}}>\r\n            <ReactWeather\r\n                forecast=\"5days\"\r\n                apikey=\"3a672a5bca657693859413a963d7b698\"\r\n                type=\"city\"\r\n                city=\"Spokane\"\r\n                unit=\"imperial\"\r\n            />\r\n        </div>,\r\n        <div key=\"calendar-widget\" data-grid={{ x: 0, y: 0, w: 3, minW: 3, h: 8}}>\r\n            <Calendar\r\n                value={new Date()}\r\n            />\r\n        </div>\r\n    ];\r\n\r\n    return (\r\n        <div className=\"layoutRoot\">\r\n            <GridLayout style={{\"background\":\"lightGrey\"}} cols={12} rowHeight={30} width={1200}>\r\n                {\r\n                    selectedWidgets.map((widget) =>\r\n                        widget\r\n                    )\r\n                }\r\n            </GridLayout>\r\n        </div>\r\n    )\r\n};\r\n\r\n// Temporary to check out Anatoli's widget\r\nexport const ClockWidget = (props) => {\r\n\r\n    const [time, setTime] = useState(new Date());\r\n\r\n    useEffect(() => {\r\n        setInterval(\r\n            () => setTime(new Date()),\r\n            1000\r\n        );\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <Clock value={time}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Dashboard;","import React from 'react';\r\nimport './App.css';\r\nimport Dashboard from \"./views/Dashboard/Dashboard\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"App\">\r\n        <AppHeader />\r\n        <Dashboard/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\nconst AppHeader = (props) => {\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                width: \"100%\",\r\n                height: \"5%\",\r\n                backgroundColor: \"white\"\r\n            }}\r\n        >\r\n            <h1>Smart Mirror Core</h1>\r\n        </div>\r\n    )\r\n\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'react-grid-layout/css/styles.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-resizable/css/styles.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}